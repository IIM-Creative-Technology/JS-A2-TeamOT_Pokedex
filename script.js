let teamForm = document.getElementById('team-name-form')
let field = document.getElementById('team-name-input')
let fieldSubmit = document.getElementById('team-name-submit')
let currentUser
let myTeam = document.getElementById('my-team')
let username = document.createElement('h1')
let myPokedex = document.createElement('div')

// Class Team pour le stockage en local storage
class Team
{
    constructor(username, pokeList)
    {
        this.username = username;
        this.pokeList = pokeList
    }
}
// =====================================================================================================================

// Class TeamStats pour le calcul des points finaux
class TeamStats
{
    constructor($urls, $hp, $attack, $defense, $score) {
        this.urls = $urls;
        this.hp = $hp;
        this.attack = $attack;
        this.defense = $defense;
        this.score = $score
    }
}
// =====================================================================================================================

// Génére le nom d'utilisateur
fieldSubmit.onclick = (e) => {
    e.preventDefault()
    currentUser = field.value
    teamForm.style.display = 'none'
    username.innerHTML = currentUser
    myTeam.appendChild(username)
}
// =====================================================================================================================

let pokeId = [1, 246, 789, 564, 321, 665]

let validation = document.getElementById('validation')

// Au clique, crée une nouvelle Team avec le username et la liste des id des pokemons de son équipe, stocké en Localstorage
validation.onclick = () => {
    let thisTeam = new  Team(currentUser, pokeId)
    localStorage.setItem(currentUser, JSON.stringify(thisTeam))
    scoreCalcul(myTeamStats, autoGeneratedTeamStats)
}
// =====================================================================================================================

// Génére une nouvelle TeamStats avec la liste des urls a fetch des pokemons de son équipe et les autres clés à 0 par défaut
let myTeamUrl = [
    'https://pokeapi.co/api/v2/pokemon/4',
    'https://pokeapi.co/api/v2/pokemon/125',
    'https://pokeapi.co/api/v2/pokemon/236',
    'https://pokeapi.co/api/v2/pokemon/652',
    'https://pokeapi.co/api/v2/pokemon/423',
    'https://pokeapi.co/api/v2/pokemon/753'
]

let myTeamStats = new TeamStats(myTeamUrl, 0, 0, 0, 0)

let autoGeneratedTeamUrl = [
    'https://pokeapi.co/api/v2/pokemon/102',
    'https://pokeapi.co/api/v2/pokemon/168',
    'https://pokeapi.co/api/v2/pokemon/220',
    'https://pokeapi.co/api/v2/pokemon/922',
    'https://pokeapi.co/api/v2/pokemon/852',
    'https://pokeapi.co/api/v2/pokemon/354'
]

let autoGeneratedTeamStats  = new TeamStats(autoGeneratedTeamUrl, 0, 0, 0, 0)

// =====================================================================================================================

// Fonction qui affecte les stats cumulés des pokemons aux stats de l'équipe
async function teamBattle($team) {
    await Promise.all($team.urls)
        .then(result => Promise.all(result.map(values => fetch(values)
        .then(pokemon => pokemon.json())
        .then(data => () => {
            for (let i = 0; i < data.length; i++) {
                let stats = data[i].stats
                $team.hp += parseInt(stats[0].base_stat)
                $team.attack += parseInt(stats[1].base_stat)
                $team.defense += parseInt(stats[2].base_stat)
            }
        }
        )
        )
        )
        )
}

window.onload = teamBattle(myTeamStats)
window.onload = teamBattle(autoGeneratedTeamStats)

// =====================================================================================================================

// Fonction qui compares les valeurs des 2 équipes et leur affectes un score chacun
function scoreCalcul($myTeam, $autoTeam) {
    for (let i = 0; i < 3; i++) {
        let myCurrentStat
        let autoCurrentStat
        if (i === 0) {
            myCurrentStat = $myTeam.hp
            autoCurrentStat = $autoTeam.hp
        } else if (i === 1) {
            myCurrentStat = $myTeam.attack
            autoCurrentStat = $autoTeam.attack
        } else {
            myCurrentStat = $myTeam.defense
            autoCurrentStat = $autoTeam.defense
        }

        if (myCurrentStat === autoCurrentStat) {
            $myTeam.score += 2
            $autoTeam.score += 2
        } else if (myCurrentStat > autoCurrentStat) {
            $myTeam.score += 2
        } else {
            $autoTeam.score += 2
        }
    }

    if ($myTeam.score > $autoTeam.score) {
        console.log('myTeam Winner')
    } else {
        console.log('autoTeam Winner')
    }
}
// =====================================================================================================================

// Connexion au fichier excel
// let data = {
//     "name": "John Smith",
//     "age": 35,
//     "address": {
//         "street": "123 Main St",
//         "city": "Anytown",
//         "state": "CA",
//         "zip": "12345"
//     }
// };
//
// let xhr = new XMLHttpRequest();
// xhr.open('GET', 'data.json', true);
// xhr.responseType = 'json';
// xhr.onload = function() {
//     if (xhr.status === 200) {
//         let dataFromFile = xhr.response
//         Object.assign(dataFromFile, data)
//         let jsonData = JSON.stringify(dataFromFile)
//     }
// };
// xhr.send();