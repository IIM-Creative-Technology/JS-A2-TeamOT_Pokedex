let teamForm = document.getElementById('team-name-form')
let field = document.getElementById('team-name-input')
let fieldSubmit = document.getElementById('team-name-submit')
let currentUser
let myTeam = document.getElementById('my-team')
let username = document.createElement('h1')
let myPokedex = document.createElement('div')

class Team
{
    constructor(username, pokeList)
    {
        this.username = username;
        this.pokeList = pokeList
    }
}

class TeamStats
{
    constructor($urls, $hp, $attack, $defense, $score) {
        this.urls = $urls;
        this.hp = $hp;
        this.attack = $attack;
        this.defense = $defense;
        this.score = $score
    }
}

fieldSubmit.onclick = (e) => {
    e.preventDefault()
    currentUser = field.value
    teamForm.style.display = 'none'
    username.innerHTML = currentUser
    myTeam.appendChild(username)
}

let pokeId = [1, 246, 789, 564, 321, 665]

let validation = document.getElementById('validation')

validation.onclick = () => {
    let thisTeam = new  Team(currentUser, pokeId)
    console.log(currentUser)
    console.log(thisTeam)
    localStorage.setItem(currentUser, JSON.stringify(thisTeam))
    scoreCalcul(myTeamStats, autoGeneratedTeamStats)
}

let myTeamUrl = [
    fetch('https://pokeapi.co/api/v2/pokemon/4'),
    fetch('https://pokeapi.co/api/v2/pokemon/125'),
    fetch('https://pokeapi.co/api/v2/pokemon/236'),
    fetch('https://pokeapi.co/api/v2/pokemon/652'),
    fetch('https://pokeapi.co/api/v2/pokemon/423'),
    fetch('https://pokeapi.co/api/v2/pokemon/753')
]

let myTeamStats = new TeamStats(myTeamUrl, 0, 0, 0, 0)

let autoGeneratedTeamUrl = [
    fetch('https://pokeapi.co/api/v2/pokemon/102'),
    fetch('https://pokeapi.co/api/v2/pokemon/168'),
    fetch('https://pokeapi.co/api/v2/pokemon/220'),
    fetch('https://pokeapi.co/api/v2/pokemon/922'),
    fetch('https://pokeapi.co/api/v2/pokemon/852'),
    fetch('https://pokeapi.co/api/v2/pokemon/354')
]

let autoGeneratedTeamStats  = new TeamStats(autoGeneratedTeamUrl, 0, 0, 0, 0)

async function teamBattle($team) {
    await Promise.all($team.urls).then(result => Promise.all(result.map(values => values.json()))).then(data => {
        for (let i = 0; i < data.length; i++) {
            let stats = data[i].stats
            $team.hp += parseInt(stats[0].base_stat)
            $team.attack += parseInt(stats[1].base_stat)
            $team.defense += parseInt(stats[2].base_stat)
        }
        console.log($team.hp)
        console.log($team.attack)
        console.log($team.defense)
    })
}

window.onload = teamBattle(myTeamStats)
window.onload = teamBattle(autoGeneratedTeamStats)

function scoreCalcul($myTeam, $autoTeam) {
    for (let i = 0; i < 3; i++) {
        let myCurrentStat
        let autoCurrentStat
        if (i === 0) {
            myCurrentStat = parseInt($myTeam.hp)
            autoCurrentStat = parseInt($autoTeam.hp)
        } else if (i === 1) {
            myCurrentStat = parseInt($myTeam.attack)
            autoCurrentStat = parseInt($autoTeam.attack)
        } else {
            myCurrentStat = parseInt($myTeam.defense)
            autoCurrentStat = parseInt($autoTeam.defense)
        }

        console.log(myCurrentStat)

        if (myCurrentStat === autoCurrentStat) {
            $myTeam.score += 2
            $autoTeam.score += 2
            console.log('égalité')
        } else if (myCurrentStat > autoCurrentStat) {
            $myTeam.score += 2
            console.log('myTeam winneer')
        } else {
            $autoTeam.score += 2
            console.log('autoTeam winneer')
        }
    }

    console.log($myTeam.score)
    console.log($autoTeam.score)
}

// window.onload = scoreCalcul(myTeamStats, autoGeneratedTeamStats)
